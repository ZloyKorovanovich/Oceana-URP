/*
Copyright 2024 Mitrofan Juryev

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#pragma kernel GenerateMesh

RWStructuredBuffer<float3> Vertices;
RWStructuredBuffer<int> Triangles;
RWStructuredBuffer<float2> UVs;

uint TriResolution;
float Scale;
float DisplaceStrength;

[numthreads(32, 32, 1)]
void GenerateMesh (uint3 id : SV_DispatchThreadID)
{
    uint vertexId = id.x + id.y * (TriResolution + 1);
    float center = ((float)TriResolution) * 0.5f;
    float xN = (id.x - center) / (float)TriResolution;
    float yN = (id.y - center) / (float)TriResolution;

    float3 pos = float3(xN, 0.0, yN);

    float farDist = min(saturate(1 - abs(pos.x)), saturate(1 - abs(pos.z)));
    float3 displ = DisplaceStrength * (farDist) * (-pos);

    UVs[vertexId] = float2(xN + 0.5f, yN + 0.5f);
    Vertices[vertexId] = (pos + displ) * Scale;


    int shift = id.y;
    uint shiftBound = TriResolution - id.y;
    if(id.x >= shiftBound && id.y != TriResolution)
        shift = id.y + 1;

    uint triangleId = vertexId * 6;

    Triangles[triangleId + 0] = vertexId + 0 + shift;
    Triangles[triangleId + 1] = vertexId + TriResolution + 1 + shift;
    Triangles[triangleId + 2] = vertexId + 1 + shift;

    Triangles[triangleId + 3] = vertexId + 1 + shift;
    Triangles[triangleId + 4] = vertexId + TriResolution + 1 + shift;
    Triangles[triangleId + 5] = vertexId + TriResolution + 2 + shift;
}